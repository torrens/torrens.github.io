<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-03T23:08:04+01:00</updated><id>http://localhost:4000/</id><title type="html">InfoSec Learnings</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">x86 Registers Overview</title><link href="http://localhost:4000/x86/2018/07/02/registers.html" rel="alternate" type="text/html" title="x86 Registers Overview" /><published>2018-07-02T10:53:41+01:00</published><updated>2018-07-02T10:53:41+01:00</updated><id>http://localhost:4000/x86/2018/07/02/registers</id><content type="html" xml:base="http://localhost:4000/x86/2018/07/02/registers.html">&lt;h1 id=&quot;x86-registers&quot;&gt;x86 Registers&lt;/h1&gt;

&lt;p&gt;The purpose of this post is to help me learn and remember the basic rules of x86 registers.
Iâ€™ve posted it here to benefit myself any others.
These notes are heavily inspired by &lt;a href=&quot;http://www.cs.virginia.edu/~evans/cs216/guides/x86.html&quot;&gt;x86 Assembly Guide, University of Virginia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;x86 processors have eight 32-bit general purpose registers.&lt;br /&gt;
32 bit (4 byte) registers EAX, EBX, ECX and EDX have subsections that can be referenced.&lt;br /&gt;
The least significant 2 bytes of EAX, called AX, can be used as a 16 bit register.&lt;br /&gt;
The least significant byte of AX, called AL, can be used as an 8 bit register.&lt;br /&gt;
The most significant bytes of AX, called AH, can be used as an 8 bit register.&lt;/p&gt;

&lt;table&gt;
    &lt;colgroup&gt;
        &lt;col width=&quot;25%&quot; /&gt;
        &lt;col width=&quot;25%&quot; /&gt;
        &lt;col width=&quot;25%&quot; /&gt;
        &lt;col width=&quot;25%&quot; /&gt;
    &lt;/colgroup&gt;
    &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
            &lt;th&gt;32 bit&lt;/th&gt;
            &lt;th&gt;16 bit&lt;/th&gt;
            &lt;th&gt;8 bit&lt;/th&gt;
            &lt;th&gt;8 bit (Least Significant Byte)&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot;&gt;EAX&lt;/td&gt;
            &lt;td style=&quot;background-color:#f3d7ca&quot;&gt;AX&lt;/td&gt;
            &lt;td style=&quot;background-color:#e6a4b4&quot;&gt;AH&lt;/td&gt;
            &lt;td style=&quot;background-color:#c86b85&quot;&gt;AL&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot;&gt;EBX&lt;/td&gt;
            &lt;td style=&quot;background-color:#f3d7ca&quot;&gt;BX&lt;/td&gt;
            &lt;td style=&quot;background-color:#e6a4b4&quot;&gt;BH&lt;/td&gt;
            &lt;td style=&quot;background-color:#c86b85&quot;&gt;BL&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot;&gt;ECX&lt;/td&gt;
            &lt;td style=&quot;background-color:#f3d7ca&quot;&gt;CX&lt;/td&gt;
            &lt;td style=&quot;background-color:#e6a4b4&quot;&gt;CH&lt;/td&gt;
            &lt;td style=&quot;background-color:#c86b85&quot;&gt;CL&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot;&gt;EDX&lt;/td&gt;
            &lt;td style=&quot;background-color:#f3d7ca&quot;&gt;DX&lt;/td&gt;
            &lt;td style=&quot;background-color:#e6a4b4&quot;&gt;DH&lt;/td&gt;
            &lt;td style=&quot;background-color:#c86b85&quot;&gt;DL&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot; colspan=&quot;4&quot;&gt;ESI&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot; colspan=&quot;4&quot;&gt;EDI&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot; colspan=&quot;4&quot;&gt;ESP (Stack Pointer)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=&quot;background-color:#f5eee6&quot; colspan=&quot;4&quot;&gt;EBP (Base Pointer)&lt;/td&gt;
        &lt;/tr&gt;    
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;static-data-regions&quot;&gt;Static Data Regions&lt;/h1&gt;

&lt;p&gt;Static data regions are the global variables of a software program.&lt;br /&gt;
Data directives DB, DW and DD are used to declare one, two and four byte data locations.&lt;br /&gt;
Data locations can be labeled with names or left anonymous.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;.Data

var   DB  55   ; Declare a byte value, labeled as location var, containing a value of 55
var2  DB  ?    ; Declare a byte value, labeled as location var2, uninitialised
      DB  10   ; Declare a byte value, with no label, containing a value of 10, Its location is var2 + 1
X     DW  ?    ; Declare a 2 byte value, labeled as location X, uninitialised

Y     DD  1000 ; Declare a 4 byte value, labeled as location Y, containing a value of 1000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;static-data-arrays&quot;&gt;Static Data Arrays&lt;/h1&gt;

&lt;p&gt;x86 arrays are defined as a number of data values listed contiguously in memory.&lt;br /&gt;
An array can be declared as listing the values.
An array can be declared using the DUP directive.
An array can be declared as listing string values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;.Data

Z  DD  1, 2, 3    ; Declare three 4 byte values, initialised to 1, 2 and 3
T  DB  10  DUP(?) ; Declare 10 uninitialised bytes
U  DD  100  DUP(0) ; Declare 100 4 byte values, each initialised to 0
P  DB  'world', 0 ; Declare 6 bytes starting at address P, initialised to the values world and 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;addressing-memory&quot;&gt;Addressing Memory&lt;/h1&gt;

&lt;p&gt;x86 processors can address up to 2&lt;sup&gt;32&lt;/sup&gt; bytes of memory. 
Memory addresses are 32 bits wide.&lt;br /&gt;
Value labels are replaced by the assembler with 32 bit quantities.&lt;br /&gt;
Addressing is used by many x86 instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;mov  eax,       [ebx]       ; Move the 4 bytes in memory at the address contained in EBX into EAX.
mov  [var],     ebx         ; Move the contents of EBX into the 4 bytes at memory address var.  
mov  eax,       [esi-4]     ; Move 4 bytes at memory address ESI + (-4) into EAX.  
mov  [esi+eax], cl          ; Move the contents of CL into the byte at address ESI + EAX.   
mov  edx,       [esi+4*ebx] ; Move the 4 bytes of data at address ESI+4*EBX into EDX.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;size-directives&quot;&gt;Size Directives&lt;/h1&gt;

&lt;p&gt;Generally the size of the data item at a given memory address can be inferred.&lt;br /&gt;
When a 32 bit register is loaded, the assembler infers that the region of memory referred is 4 bytes wide.
When the value of a one byte register is stored, the assembler infers that the address should refer to a single byte.&lt;br /&gt;
In some cases the operation is ambiguous.
The size directives BYTE PTR, WORD PTR and WORD PTR indicate 1, 2 and 4 bytes respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;mov  BYTE PTR [ebx], 2  ; Move 2 into the single byte at the address stored in EBX.  
mov  WORD PTR [ebx], 2  ; Move the 2 byte integer representation of 2 into the 2 bytes starting at address stored in EBX.  
mov  DWORD PTR [ebx], 2 ; Move the 4 byte integer representation of 2 into the 4 bytes starting at address stored in EBX.  
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;data-movement-instructions&quot;&gt;Data Movement Instructions&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;mov&lt;/strong&gt; - The mov instruction copies the data item referred to by its second operand into the location referred to the first operand.&lt;/p&gt;

&lt;p&gt;Register to register moves are possible.
Memory to memory moves are not possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;mov eax, ebx          ; Copy the value in EBX to EAX.  
mov BYTE PTR [var], 5 ; Store the value of 5 into the byte at location var.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;push&lt;/strong&gt; - The push instruction places its operand onto the top of the stack.&lt;/p&gt;

&lt;p&gt;Push first decrements ESP by 4, then places its operand into the contents of the location at address ESP.&lt;br /&gt;
ESP, the stack pointer is decremented as the x86 stack grows down.
The stcak grows from high addresses to lower addresses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;push eax   ; Push eax onto the stack
push [var] ; Push the 4 bytes at address var onto the stack.   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;pop&lt;/strong&gt; - The pop instruction removes the 4 byte data element from the top of the stack into the specified operand.&lt;/p&gt;

&lt;p&gt;Pop first moves the 4 bhtes located at memory location [SP] into the specified register or memory location and then increments SP by 4.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;pop edi   ; Pop the top element of the stack into EDI.  
pop [ebx] ; Pop the top element of the stack into the four bytes starting at location EBX.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;arithmetic-and-logic-instructions&quot;&gt;Arithmetic and Logic Instructions&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;add&lt;/strong&gt; - The add instruction adds together two operands and stores the result in the first.&lt;/p&gt;

&lt;p&gt;Both operands may be registers.&lt;br /&gt;
Only one operand can be a memory location.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;add eax, 10            ; The value of EAX is changed to EAX + 10.  
add BYTE PTR [var], 10 ; Add 10 to the single byte stored at memory address var.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;sub&lt;/strong&gt; - The sub instruction subtracts the value of the second operand from the value of the first operand, and stores the result in the first operand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;sub al, ah   ; The value of AL is changed to AL - AH.  
sub eax, 216 ; Subtract 216 from the value stored in EAX.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;inc, dec&lt;/strong&gt; - The inc instruction increments the contents of its operand by 1.&lt;br /&gt;
The dec instruction decrements the contents of its operand by 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;inc DWORD PTR [var] ; Increments the 4 byte value stored in var.  
dec eax             ; Decrements EAX.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;and, or, xor&lt;/strong&gt; - These instructions perform bitwise manipulations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;and eax, 0fH ; Clear all but the last 4 bits of EAX.  0f hex equals b00001111  
xor edx, edx ; Sets the contents of EDX to 0.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;not&lt;/strong&gt; - Bitwise not&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;not BYTE PTR [var] ; Negates all bits in the byte at the memory location var.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;control-flow-instructions&quot;&gt;Control Flow Instructions&lt;/h1&gt;

&lt;p&gt;x86 processors maintain a 32 bit value instruction pointer IP register.&lt;br /&gt;
The IP increments to point to the next instruction in memory.&lt;br /&gt;
Labels are used to as places in the program that the IP can be moved to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jmp&lt;/strong&gt; - The jmp instruction transfers program to the instruction at the memory indicated by the operand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;jmp start ; Jump to the instruction labeled start.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;jcondition&lt;/strong&gt; - The conditional jump instructions transfers the instruction pointer based on a condition.  The conditional jump instructions are used in conjunction with the cmp (compare) instruction.&lt;/p&gt;

&lt;p&gt;The available conditional jump instructions are:&lt;/p&gt;

&lt;p&gt;je - jump when equal&lt;br /&gt;
jne - jump when not equal&lt;br /&gt;
jz - jump when the last result was zero&lt;br /&gt;
jg - jump when greater than&lt;br /&gt;
jge - jump when greater than or equal to
jl - jump when less than&lt;br /&gt;
jle - jump when less than or equal to&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;cmp eax, ebx
jle done      ; If the contents of EAX are less than or equal to the contents of EBX, jump to the label done.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;call, ret&lt;/strong&gt; - Subroutine call and return&lt;/p&gt;

&lt;p&gt;The call instruction first pushed the current code location onto the stack and then performs an unconditional jump to the code location indicated by the label operand.&lt;br /&gt;
The ret instruction implements a subroutine return mechanism.&lt;br /&gt;
This pops a code location off the stack and then performs an unconditional jump to the retrieved code location.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-assembly&quot; data-lang=&quot;assembly&quot;&gt;call doit
ret&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">x86 Registers</summary></entry></feed>